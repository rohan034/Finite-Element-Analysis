%**************************************************************************%*                                                                        *%*                              CE529A                                    *%*                                                                        *%*            3D FINITE ELEMENT PROGRAM - MATLAB - FEA.m                  *%*                     8 NODE 3-D SHELL ELEMENTS                          *%*                                                                        * %*                        ANALYSIS OPTIONS:                               *%*                        -----------------                               * %*                        STATIC ANALYSIS                                 *%*                        TIME-HISTORY DYNAMIC ANALYSIS                   *%*                                                                        *%*    THIS IS AN EXAMPLE PROGRAM FOR THE CLASS PROJECT. YOU MAY SIMPLY    *%*    MODIFY THIS PROGRAM TO REACH THE PROJECT OBJECTIVES.                *%*                                                                        *%*    Program Files: FEA3DS8.m, FEA3DS9_create_input.m                  *%*                                                                        *%*    Input Files: FEA3DS8_node.txt, FEA3DS8_element.txt (from Abaqus)    *%*    Output File: output.txt                                             *%*                                                                        *%**************************************************************************clear allclc% SET OPTION PARAMETER:% 1 - STATIC ANALYSIS% 2 - DYNAMIC ANALYSISiopt = 1;% CREATE INPUT DATA FROM ABAQUS INPUT FILE.FEA3DS8_create_input% LOAD THE INPUT DATA CREATED IN: FEA3DS9_create_input.mload FEA_input_data.mat coord lotogo jj young poisson density ifornod ifordir forval ntimeStep dt AlfaDamp BetaDamp dTemp coefExp Thickness Pressure;% ASSIGN MESH AND CONNECTIVITY DATA.[njoint,nCoordD] = size(coord);[nel,nnod] = size(lotogo);[j,nfor] = size(ifornod);[nj,nDOFPN] = size(jj);jjjj = jj ;% COMPUTE EQ. NUMBERS.[jj,ndf] = eqnum(jj,njoint,nDOFPN);% COMPUTE THE COLUMN HEIGHTS.[nbig,maxa] = colht(lotogo,jj,nel,ndf);% ZERO THE TOTAL STIFF. MATRIX AND MASS MATRIX.a(1:nbig) = 0.0;m(1:nbig) = 0.0;ndfp = ndf+1;% ZERO DISPL. AND FORCE VECTORS.d(1:ndf) = 0.0;f(1:ndf) = 0.0;% LOAD CONCENTRATED FORCES IN f.for i = 1:nfor,   inod = ifornod(i);   %idir = ifordir(i);   idir = ifordir;   idof = jj(inod,idir);   if (idof~=0)        f(idof) = f(idof) + forval(i);   endend% ZERO ELEMENT COORD VECTORS.x = zeros(nnod,1);y = zeros(nnod,1);z = zeros(nnod,1);%iopt = 1;% LOOP ON THE NUMBER OF ELEMENTS - FORM GLOBAL STIFF. MATRIX, ETC.for iel = 1:nel    t=Thickness*ones(nnod,1);    x_loc = zeros(nnod,1);    y_loc = zeros(nnod,1);    z_loc = zeros(nnod,1);       % EXTRACT ELEMENT GEOMETRY IN GLOBAL COORDINATE SYSTEM.   for iloc = 1:nnod        x(iloc,1) = coord(lotogo(iel,iloc),1);        y(iloc,1) = coord(lotogo(iel,iloc),2);		z(iloc,1) = coord(lotogo(iel,iloc),3);   end       [V1,V2,V3,V1T,V2T,V3T]=CreateNormV(x,y,z,t);   %**********************************************************************   %*    REQUIRED CHANGE: MODIFY FUNCTION STIFF TO COMPUTE PROPER        *   %*                     ELEMENT STIFFNESS MATRIX                       *   %*                     ELEMENT FORCE VECTOR AND                       *   %*                     ELEMENT MASS MATRIX                            *   %**********************************************************************   % FORMS STIFFNESS MATRIX, FORCE VECTOR AND MASS MATRIX.   [akloc,felloc,amloc] = stiff(young,poisson,density,x,y,z,dTemp,coefExp,t);   % ASSEMBLY OF LOCAL SHELL ELEMENT MATRICES INTO GLOBAL STRUCTURE MATRICES.   if iopt == 1	   % TRANSFORM SHELL STIFF. MATRIX AND FORCE VECTOR FROM LOCAL TO GLOBAL COORDINATES.	   [akglob,felglob,L] = Loc2GlobTrans(akloc,felloc,V1,V2,V3);        %LL=L;        %akglobb=akglob(1:12,1:12)       % ASSEMBLE THE STIFF. MATRIX AND FORCE VECTOR INTO GLOBAL STRUCTURE MATRICES.       [a,f] = assem(iel,lotogo,jj,a,f,maxa,akglob,felglob);          else	   % TRANSFORM SHELL STIFF. MATRIX, FORCE VECTOR AND MASS MATRIX FROM LOCAL TO GLOBAL COORDINATES.	   [akglob,amglob,felglob,L] = Loc2GlobTransm(akloc,amloc,felloc,V1,V2,V3);       % ASSEMBLE THE STIFF. MATRIX AND FORCE VECTOR AND MASS MATRIX INTO GLOBAL STRUCTURE MATRICES.       [a,m,f] = assemm(iel,lotogo,jj,a,m,f,maxa,akglob,amglob,felglob);   end   end% MAKE COPY OF ASSEMBLED STIFFNESS MATRIX FOR TRANSFER TO SOLVER COLSOL.at = a;% MAKE COPY OF ASSEMBLED FORCE VECTOR.ff = f;% SOLVE THE EQUATIONS.if iopt == 1        % SOLVE STATIC ANALYSIS.    [at] = colsol(ndf,1,at,f,maxa);    [f,d] = colsol(ndf,2,at,f,maxa);    else        % SOLVE DYNAMIC ANALYSIS.      %**********************************************************************  %*    NOTE: NO CHANGE NECESSARY IN THIS FUNCTION                      *  %*                                                                    *  %*    THIS PART OF THE PROGRAM USES THE HOUBOLT INTEGRATION METHOD    *  %*    TO DO A TIME-HISTORY DYNAMICS ANALYSIS. IT USES RAYLEIGH        *  %*    METHOD TO CALCULATE DAMPING MATRIX FOR THE ANALYSIS.            *  %**********************************************************************    % INITIALIZE VARIABLES.    uDisp = zeros(ndf,ntimeStep+1);    uVel = zeros(ndf,ntimeStep+1);    uAcc = zeros(ndf,ntimeStep+1);        uDispAux = zeros(1,ndf);	% {Disp}(0)    uVelAux = zeros(1,ndf);		% {Vel}(0)        % INITIAL CALCULATIONS.    % CREATE RAYLEIGH DAMPING MATRIX [C] = ALFA*[M] + BETA*[K].    c = AlfaDamp*m + BetaDamp*a;        % INITIAL CONDITIONS.    % WE HAVE INITIAL VELOCITY AND DISPLACEMENT EQUAL ZERO.    % CALCULATE ACCELERATION AT T=0.    % {Acc}(0) = [M]^-1*(F(0) - [C]*{Vel}(0) - [K]*{Disp}(0))    uAccAux = zeros(1,ndf);    %uAccAux=f;    [uAccAux] = updtfr(jj,maxa,njoint,uAccAux,(-1*c),(-1*a),uVelAux,uDispAux);    mAux = m;    [mAux] = colsol(ndf,1,mAux,uAccAux,maxa);    [mAux,uAccAux] = colsol(ndf,2,mAux,uAccAux,maxa);    uAcc(:,1) = uAccAux;    	% THE INTEGRATION CONSTANTS FOR NEWMARK-BETA.    %    Beta = 0.25;    Gamma = 0.5;    %        a0 = 1/(Beta*dt*dt);    a1 = Gamma/(Beta*dt);    a2 = 1/(Beta*dt);    a3 = (1/(2*Beta))-1;    a4 = (Gamma/Beta) - 1;    a5 = dt*((Gamma/(2.0*Beta))-1);    	    % FORM THE EFFECTIVE STIFFNESS MATRIX.    % [Keff] = [K] + a0*[M] + a1*[C]     aEff = a + a0*m +a1*c ;    % NOW WE DECOMPOSE THE EFFECTIVE STIFFNESS MATRIX (ONLY ONCE) TO TRIANGULARIZE [Keff].    [aEff] = colsol(ndf,1,aEff,f,maxa);	    % START TO DO EACH TIME STEP i.    for it = 1:ntimeStep                clc        it                % CALCULATE THE EFFECTIVE FORCE VECTOR AT TIME i.        % {Feff}(ti) =        % {F}(ti) + [M]*(a0*{Disp}(ti)+a2*{Vel}(ti)+a3*{Acc}(ti))        % + [C]*(a1*{Disp}(ti)+a4*{Vel}(ti)+a5*{Acc}(ti))        Feff = f;        dV1 = a0*uDispAux + a2*uVelAux + a3*uAccAux;        dV2 = a1*uDispAux + a4*uVelAux + a5*uAccAux;        [Feff] = updtfr(jj,maxa,njoint,Feff,m,c,dV1,dV2);                % SOLVE FOR THE DISPLACEMENT AT TIME i+1.        [Feff,uDispAuxDt] = colsol(ndf,2,aEff,Feff,maxa);                % CALCULATE THE ACCELERATION AT TIME i+1.        % {Acc}(ti+1) = a0*({Disp}(ti+1)-{Disp}(ti))-a2*{Vel}(ti)-a3*{Acc}(ti)        uAccAuxDt = a0*(uDispAuxDt - uDispAux) - a2*uVelAux - a3*uAccAux;                % CALCULATE THE VELOCITY AT TIME i+1.        % {Vel}(ti+1) = a1*({Disp}(ti+1)-{Disp}(ti))-a4*{Vel}(ti)-a5*{Acc}(ti)        uVelAuxDt = a1*(uDispAuxDt - uDispAux) - a4*uVelAux - a5*uAccAux;                % STORE THE DISPALCEMENT VELOCITY AND ACCELERATION AT TIME i.        uDisp(:,it+1) = uDispAuxDt;        uVel(:,it+1) = uVelAuxDt;        uAcc(:,it+1) = uAccAuxDt;                uDispAux = uDispAuxDt;        uVelAux  = uVelAuxDt;        uAccAux = uAccAuxDt;            endend% OUTPUT THE RESULTING DISPLACEMENTS AND THE INTPUTS.fid = fopen('output.txt','w');fprintf(fid,'------------------------------\n');fprintf(fid,'FEA Finite Element Calculation\n');fprintf(fid,'------------------------------\n\n');%% PRINT PROBLEM SIZE PARAMETERS.fprintf(fid,'Number of Nodes and Number of Elements:');fprintf(fid,'  %6.0f  %6.0f\n',njoint,nel);% PRINT MATERIAL DATA.fprintf(fid,'\n');fprintf(fid,'Modulus of Elasticity:');fprintf(fid,' %6.0f\n',young);fprintf(fid,'poisson ratio:');fprintf(fid,' %6.2f\n',poisson);fprintf(fid,'structure density:');fprintf(fid,' %6.6f\n',density);% ANALYSIS TYPE.fprintf(fid,'\n');if iopt == 1     fprintf(fid,'Static Analysis');else    fprintf(fid,'Dynamic Analysis\n');    fprintf(fid,'Number of Time Step:');    fprintf(fid,' %6.0f\n',ntimeStep);    fprintf(fid,'Time Step dt:');    fprintf(fid,' %6.4f\n',dt);    fprintf(fid,'Rayleigh Damping Parameters\n');    fprintf(fid,'Alfa : ');    fprintf(fid,'%6.4f\n',AlfaDamp);    fprintf(fid,'Beta : ');    fprintf(fid,'%6.4f\n',BetaDamp);endfprintf(fid,'\n');% PRINT NODE GLOBAL COORDINATES.fprintf(fid,'\n');for inod = 1:njoint   fprintf(fid,'Joint Coordinates-INOD:');   xnode=coord(inod,1);   ynode=coord(inod,2);   znode=coord(inod,3);   fprintf(fid,' %6.0f %6.2f %6.2f %6.2f\n',inod,xnode,ynode,znode);end ;fprintf(fid,'\n');% PRINT JOINT RESTRAINTS.for inod = 1:njointfprintf(fid,'Joint Restraints at Node Point-INOD:');   jj1 = jjjj(inod,1);   jj2 = jjjj(inod,2);   jj3 = jjjj(inod,3);   jj4 = jjjj(inod,4);   jj5 = jjjj(inod,5);   jj6 = jjjj(inod,6);   fprintf(fid,' %4.0f %3.0f %3.0f %3.0f %3.0f %3.0f %3.0f\n',inod,jj1,jj2,jj3,jj4,jj5,jj6);end;fprintf(fid,'\n');%% PRINT ELEMENT CONNECTIVITY.for iel = 1:nelfprintf(fid,'Connectivity-IEL:');   conn = lotogo(iel,1:nnod);   fprintf(fid,' %4.0f %4.0f %4.0f %4.0f %4.0f %4.0f %4.0f %4.0f %4.0f\n',iel,conn);end;fprintf(fid,'\n');% PRINT CONCENTRATED FORCES.for i = 1:nfor,fprintf(fid,'Concen. Forces-I,IFORNOD,IFORDIR,FORVAL:');   inod = ifornod(i);   %idir = ifordir(i);   idir = ifordir;   fprintf(fid,' %4.0f %4.0f %3.0f %6.2f\n',i,inod,idir,forval(i));end;fprintf(fid,'\n');% PRINT TOTAL NODAL APPLIED FORCES.for inod = 1:njoint   jj1 = jj(inod,1);   f1 = 0.0;   if (jj1~=0)      f1 = ff(jj1);   end   jj2 = jj(inod,2);   f2 = 0.0;   if (jj2~=0)      f2 = ff(jj2);   end   jj3 = jj(inod,3);   f3 = 0.0;   if (jj3~=0)      f3 = ff(jj3);   end   jj4 = jj(inod,4);   f4 = 0.0;   if (jj4~=0)      f4 = ff(jj4);   end   jj5 = jj(inod,5);   f5 = 0.0;   if (jj5~=0)      f5 = ff(jj5);   end   jj6 = jj(inod,6);   f6 = 0.0;   if (jj6~=0)      f6 = ff(jj6);   end   iprint = 0;   if (f1 ~= 0.0)      iprint = 1;   end   if (f2 ~= 0.0)      iprint = 1;   end   if (f3 ~= 0.0)      iprint = 1;   end   if (f4 ~= 0.0)      iprint = 1;   end   if (f5 ~= 0.0)      iprint = 1;   end   if (f6 ~= 0.0)      iprint = 1;   end      if (iprint ~= 0),      fprintf(fid,'Acting Forces-INOD:');      fprintf(fid,' %4.0f %6.2f %6.2f %6.2f %6.2f %6.2f %6.2f\n',inod,f1,f2,f3,f4,f5,f6);   end end fprintf(fid,'\n');% PRINT EQUATION NUMBERS.for inod = 1:njointfprintf(fid,'Degrees of Freedom Point-INOD:');   jj1 = jj(inod,1);   jj2 = jj(inod,2);   jj3 = jj(inod,3);   jj4 = jj(inod,4);   jj5 = jj(inod,5);   jj6 = jj(inod,6);   fprintf(fid,' %4.0f %4.0f %4.0f %4.0f %4.0f %4.0f %4.0f\n',inod,jj1,jj2,jj3,jj4,jj5,jj6);end;fprintf(fid,'\n');if iopt == 1         % PRINT COMPUTED NODAL DISPLACEMENTS.    for inod = 1:njoint        fprintf(fid,'Output Displacements-INOD:');        jj1 = jj(inod,1);        d1 = 0.0 ;        if (jj1~=0)            d1 = d(jj1);         end        jj2=jj(inod,2);        d2=0.0 ;        if (jj2~=0)            d2=d(jj2);         end        jj3 = jj(inod,3);        d3 = 0.0 ;        if (jj3~=0)            d3 = d(jj3);         end        jj4=jj(inod,4);        d4=0.0 ;        if (jj4~=0)            d4=d(jj4);         end        jj5 = jj(inod,5);        d5 = 0.0 ;        if (jj5~=0)            d5 = d(jj5);         end        jj6=jj(inod,6);        d6=0.0 ;        if (jj6~=0)            d6=d(jj6);         end        fprintf(fid,' %4.0f %6.5f %6.5f %6.5f %6.5f %6.5f %6.5f\n',inod,d1,d2,d3,d4,d5,d6);    end ;    fprintf(fid,'\n');    % PRINT COMPUTED STRESSES.    % LOOP ON THE NUMBER OF ELEMENTS-COMPUTE ELEMENT STRESSES.    disp = zeros(48,1);    for iel = 1:nel,		% EXTRACT ELEMENT GEOMETRY IN GLOBAL COORDINATE SYSTEM.		for iloc = 1:nnod			x(iloc,1) = coord(lotogo(iel,iloc),1);			y(iloc,1) = coord(lotogo(iel,iloc),2);			z(iloc,1) = coord(lotogo(iel,iloc),3);        end                  % EXTRACT ELEMENT NODAL DISPLACEMENTS IN GLOBAL COORDINATE SYSTEM.        for iloc = 1:nnod,            inod = lotogo(iel,iloc);            for idir = 1:nDOFPN,                disp((iloc-1)*nDOFPN + idir,1) = 0.0;                ieqnm = jj(inod,idir);				if (ieqnm ~= 0),					disp((iloc-1)*nDOFPN + idir,1) = d(ieqnm);				end            end        end				% COMPUTE ELEMENT NODAL DISPLACEMENTS IN LOCAL COORDINATE SYSTEM.	   [akglob,felglob,L] = Loc2GlobTrans(akloc,felloc,V1,V2,V3);		disploc = L*disp;		        %****************************************************        %*    REQUIRED CHANGE: MODIFY FUNCTION STRESS TO    *        %*    COMPUTE PROPER ELEMENT STRESSES.              *        %****************************************************        % STRESS CALCULATION PROCEDURE AT THE CENTER OF THE ELEMENT.        ipt = 1;        t=Thickness*ones(8,1);        [sigPr,sigVon] = stress(young,poisson,x,y,z,disploc,0,0,-1,dTemp,coefExp,t);        %        fprintf(fid,'Output Stress @ the Center of Element - IEL - Principal:');        fprintf(fid,' %4.0f %3.0f %6.3f %6.3f %6.3f\n',iel,ipt,sigPr);		fprintf(fid,'                                               VonMises:');        fprintf(fid,' %4.0f %3.0f %6.3f\n',iel,ipt,sigVon);		%    endelse        for it = 1:ntimeStep	        % PRINT COMPUTED NODAL DISPLACEMENTS AT DYNAMIC TIME STEP it.        fprintf(fid,'Time t =');        fprintf(fid,' %6.5f\n',it*dt);        fprintf(fid,'\n');        		for inod = 1:njoint			fprintf(fid,'Output Displacements-INOD:');			jj1 = jj(inod,1);			d1 = 0.0 ;			if (jj1~=0)				d1 = d(jj1); 			end			jj2=jj(inod,2);			d2=0.0 ;			if (jj2~=0)				d2=d(jj2); 			end			jj3 = jj(inod,3);			d3 = 0.0 ;			if (jj3~=0)				d3 = d(jj3); 			end			jj4=jj(inod,4);			d4=0.0 ;			if (jj4~=0)				d4=d(jj4); 			end			jj5 = jj(inod,5);			d5 = 0.0 ;			if (jj5~=0)				d5 = d(jj5); 			end			jj6=jj(inod,6);			d6=0.0 ;			if (jj6~=0)				d6=d(jj6); 			end			fprintf(fid,' %4.0f %6.5f %6.5f %6.5f %6.5f %6.5f %6.5f\n',inod,d1,d2,d3,d4,d5,d6);		end ;		fprintf(fid,'\n');		    end  			% SELECT THE DOF NUMBER TO BE PLOTTED FOR DYNAMIC ANALYSIS CASE.	iDOF=7; % Y DOF @ Node 3: Point C	plot(dt*(0:ntimeStep),uDisp(iDOF,:))	grid;    title(strcat('Displacement vs Time - Y DOF @ Point C','    Time Increment =',{' '},num2str(dt)));	xlabel('Time [sec]');ylabel('Displacemnt [in]');	print('-djpeg','-r600',strcat('Displacement_vs_Time_Y_Point_C_Time_Increment',num2str(dt),'.jpeg'));	%close	fprintf(fid,'Displacement Y vs Time @ Node 3: Point C');	fprintf(fid,'\n');	for it = 1:ntimeStep		it_Time = it*dt;		fprintf(fid,'%6.5f %6.5f\n',it_Time, uDisp(iDOF,it));	end	fprintf(fid,'\n');	endfclose(fid);save FEA_output_data.mat coord lotogo nnod nDOFPN jj young poisson d nel dTemp coefExp Thickness;if iopt==1         % PLOT THE DISPLACEMENT AND STRESS RESULTS FOR STATIC ANALYSIS CASE.    %FEA3DS8_PlotResult        end